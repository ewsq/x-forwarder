import java.nio.file.Paths

group 'com.incarcloud'
version '2.0'

buildscript {
    repositories {
        if (project.hasProperty("maven")) {
            if (maven.equals("maven.aliyun.com"))
                maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
            else
                mavenCentral()
        } else {
            mavenCentral()
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.5.+")
    }
}

apply plugin: 'org.springframework.boot'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    if (project.hasProperty("maven")) {
        if (maven.equals("maven.aliyun.com"))
            maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
        else
            mavenCentral()
    } else {
        mavenCentral()
    }
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web:1.5.+"){
        exclude module: "spring-boot-starter-logging"
    }
    compile("org.springframework.boot:spring-boot-starter-log4j2:1.5.+")
    testCompile("junit:junit:4.+")
    testCompile("org.springframework.boot:spring-boot-starter-test:1.5.+")
}

task MarkGitVersion{
    doLast{
        def git = "git -C " + projectDir + " "
        def branch = (git + "symbolic-ref --short HEAD").execute().text.trim()
        def rev = (git + "rev-list --count HEAD").execute().text.trim()
        def hash = (git + "rev-parse --short HEAD").execute().text.trim()
        def hash160 = (git + "rev-parse HEAD").execute().text.trim()
        println("\tMark Git Version: " + branch + "." + rev + "@" + hash)

        def pathGitVer = projectDir.toPath().resolve("src/main/java/com/incarcloud/xforwarder").toFile()

        def javaFile = new File(pathGitVer, "GitVer.jav_").text
        javaFile = javaFile
                .replace("\$branch\$", branch)
                .replace("\$rev\$", rev)
                .replace("\$hash\$", hash)
                .replace("\$hash160\$", hash160)

        def writer = new PrintWriter(new File(pathGitVer, "GitVer.java"))
        writer.print(javaFile)
        writer.close()
    }
}

compileJava{
    dependsOn MarkGitVersion
    options.encoding = "utf-8"
    options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava{
    dependsOn MarkGitVersion
    options.encoding = "utf-8"
    options.compilerArgs << "-Xlint:unchecked"
}

test{
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

bootRun{
    systemProperties System.getProperties()
    addResources = true
}

defaultTasks "assemble"